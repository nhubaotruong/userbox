name: build-boxkit
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * TUE'
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
env:
    IMAGE_NAME: userbox
    IMAGE_TAGS: latest
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
    steps:
      - name: Maximize build space
        uses: jlumbroso/free-disk-space@v1.3.1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4
        
      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/boxkit/main/README.md
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=sha
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile
          pull: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
            
      # Sign container
      - uses: sigstore/cosign-installer@v3.5.0

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          for TAG in ${TAGS}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY ${TAG}
          done
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
      
      - name: Clean old cache
        uses: MyAlbum/purge-cache@v2
        with:
          max-age: 259200

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
